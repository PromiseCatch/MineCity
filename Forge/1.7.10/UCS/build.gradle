buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "forge2"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "covertdragon"
            url = "https://maven.covertdragon.team/repository/internal/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.5') {
            changing = true
        }
    }
}

apply plugin: 'forge'

project(':Forge:1.7.10:UCS') {
    archivesBaseName = "MineCity-Forge-MC1.7.10-UCS"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
}

configurations {
    shade
    compile.extendsFrom shade
}

repositories {
    maven { url = "http://maven.cil.li/" }
    maven { url = "http://maven.ic2.player.to/" }
}

dependencies {
    implementation(project(':Forge:1.7.10'))
    implementation "com.github.GameModsBR:UniversalCoinsServer:e0aab5dbb6111b524a00933f5dfa2faddc4ef2e5"
    testImplementation fileTree(dir: "run/mods", include: ["*.jar"], exclude:["*Assets*"])
    testImplementation fileTree(dir: "run/mods/1.7.10", include: ["*.jar"])
}

jar {
    manifest {
        attributes (
                'FMLCorePlugin': 'br.com.gamemods.minecity.forge.mc_1_7_10.core.MineCitySevenCoreMod',
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLAT': 'minecity_at.cfg'
        )
    }

    configurations.shade.each { dep ->
        if(dep.name.endsWith(".jar")) {
            from(project.zipTree(dep)) {
                include 'br/**', '*.yml', 'deps.info', 'minecity_*.cfg', 'assets/minecity/**', 'org/mcstats/**'
            }
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
